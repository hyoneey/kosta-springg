package org.zerock.util;

import java.awt.image.BufferedImage;
import java.io.File;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.UUID;

import javax.imageio.ImageIO;

import org.imgscalr.Scalr;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.FileCopyUtils;

public class UploadFileUtils {

  private static final Logger logger = 

	//업로드 폴더의 생성 처리
	private static String calcPath(String uploadPath) {

		Calendar cal = Calendar.getInstance(); //날짜 정보 가져옴

		String yearPath = File.separator + cal.get(Calendar.YEAR);

		String monthPath = yearPath + File.separator + new DecimalFormat("00").format(cal.get(Calendar.MONTH) + 1);

		String datePath = monthPath + File.separator + new DecimalFormat("00").format(cal.get(Calendar.DATE));

		makeDir(uploadPath, yearPath, monthPath, datePath);

		logger.info(datePath);

		return datePath;
	}

	//폴더생성
	private static void makeDir(String uploadPath, String... paths) {

		if (new File(paths[paths.length - 1]).exists()) {
			return;
		}

		for (String path : paths) {

			File dirPath = new File(uploadPath + path);

			if (!dirPath.exists()) {
				dirPath.mkdir();
			}
		}
	}
	
	//썸네일 이미지 생성 : 파일이 이미지이면 썸네일 생성, 아닐 시 파일명만 나옴
	private static String makeThumbnail(String uploadPath, String path, String fileName) throws Exception {

		//실제 이미지가 아닌 메모리상의 이미지 - 정해진 크기에 맞게 작은 이미지 파일에 원본이미지 복사
		BufferedImage sourceImg = ImageIO.read(new File(uploadPath + path, fileName));

		//FIT_TO_HEIGHT  설정 이미지 파일 높이를 지정
		BufferedImage destImg = Scalr.resize(sourceImg, Scalr.Method.AUTOMATIC, Scalr.Mode.FIT_TO_HEIGHT, 100);

		//s_ 가 붙어있으면 썸네일 이미지, 아니면 원본이미지
		String thumbnailName = uploadPath + path + File.separator + "s_" + fileName;

		File newFile = new File(thumbnailName);
		String formatName = fileName.substring(fileName.lastIndexOf(".") + 1);

		ImageIO.write(destImg, formatName.toUpperCase(), newFile);
		
		//문자열 치환 
		return thumbnailName.substring(uploadPath.length()).replace(File.separatorChar, '/');
	}
  
	//upload 데이터를 파라미터로 전송받는 함수 : 저장경로(uploadPath), 원본 파일 이름(originalName), 파일데이터(byte[])
	//최종적으로 파일 업로드를 처리하는 함수
	public static String uploadFile(String uploadPath, String originalName, byte[] fileData) throws Exception {

		UUID uid = UUID.randomUUID();

		String savedName = uid.toString() + "_" + originalName;

		String savedPath = calcPath(uploadPath); //저장될 경로

		File target = new File(uploadPath + savedPath, savedName);

		FileCopyUtils.copy(fileData, target); //원본 파일을 저장하는 부분

		String formatName = originalName.substring(originalName.lastIndexOf(".") + 1); //원본파일의 확장자

		String uploadedFileName = null;

		if (MediaUtils.getMediaType(formatName) != null) {
			uploadedFileName = makeThumbnail(uploadPath, savedPath, savedName);
		} else {
			uploadedFileName = makeIcon(uploadPath, savedPath, savedName);
		}

		return uploadedFileName;

	}

	private static String makeIcon(String uploadPath, String path, String fileName) throws Exception {

		String iconName = uploadPath + path + File.separator + fileName;

		return iconName.substring(uploadPath.length()).replace(File.separatorChar, '/');
	}
  
  
  
  
  

  
  
}
